// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/address/{pubKey}/bills": {
            "get": {
                "description": "Get bills associated with a specific public key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bills"
                ],
                "summary": "Retrieve bills by public key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public Key",
                        "name": "pubKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bills",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Bill"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Missing 'pubKey' variable in the URL",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error: Bills with specified public key not found",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blocks": {
            "get": {
                "description": "Get blocks, given a start block number and limit.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get blocks, given a start block number and limit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "optionally specify the start block number",
                        "name": "startBlock",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "optionally specify the number of blocks to return, defaults to 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.BlockInfo"
                            }
                        }
                    }
                }
            }
        },
        "/blocks/{blockNumber}": {
            "get": {
                "description": "Retrieves a block using the block number provided as a path parameter or retrieves the latest block if no block number is specified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Retrieve a block by block number or the latest block",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The block number to retrieve (optional; if not provided, the latest block is returned)",
                        "name": "blockNumber",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the block",
                        "schema": {
                            "$ref": "#/definitions/api.BlockInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid block number format or other client error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Block with the specified block number not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error, such as failure to load the last block number or to load the block from the service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocks/{blockNumber}/txs": {
            "get": {
                "description": "Retrieves a list of transactions for a given block number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve transactions by block number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The block number for which to retrieve transactions",
                        "name": "blockNumber",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of transactions for the block",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TxInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid 'blockNumber' variable in the URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No transactions found for the specified block number",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/txs/{txHash}": {
            "get": {
                "description": "Retrieves transaction details using a transaction hash provided as a path parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve a transaction by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The hash of the transaction to retrieve",
                        "name": "txHash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the transaction information",
                        "schema": {
                            "$ref": "#/definitions/api.TxInfo"
                        }
                    },
                    "400": {
                        "description": "Missing 'txHash' variable in the URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction with the specified hash not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to load transaction details",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/units/{unitID}/txs": {
            "get": {
                "description": "Get transactions associated with a specific unit ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve transactions by unit ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unit ID",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TxInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Missing 'unitID' variable in the URL",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error: Transaction with specified unit ID not found",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Bill": {
            "type": "object",
            "properties": {
                "billData": {
                    "$ref": "#/definitions/money.BillData"
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "api.BlockInfo": {
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/types.Header"
                },
                "txHashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unicityCertificate": {
                    "$ref": "#/definitions/types.UnicityCertificate"
                }
            }
        },
        "api.TxInfo": {
            "type": "object",
            "properties": {
                "blockNumber": {
                    "type": "integer"
                },
                "transaction": {
                    "$ref": "#/definitions/types.TransactionRecord"
                },
                "txOrderHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "txRecordHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "imt.PathItem": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "key": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "money.BillData": {
            "type": "object",
            "properties": {
                "counter": {
                    "description": "The transaction counter of this bill",
                    "type": "integer"
                },
                "lastUpdate": {
                    "description": "The round number of the last transaction with the bill",
                    "type": "string",
                    "example": "0"
                },
                "locked": {
                    "description": "locked status of the bill, non-zero value means locked",
                    "type": "string",
                    "example": "0"
                },
                "value": {
                    "description": "The monetary value of this bill",
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "restapi.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "types.ClientMetadata": {
            "type": "object",
            "properties": {
                "feeCreditRecordID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "maxTransactionFee": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "types.Header": {
            "type": "object",
            "properties": {
                "previousBlockHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "proposerID": {
                    "type": "string"
                },
                "shardID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "systemID": {
                    "type": "integer"
                }
            }
        },
        "types.InputRecord": {
            "type": "object",
            "properties": {
                "block_hash": {
                    "description": "hash of the block",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "hash": {
                    "description": "state hash to be certified",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "previous_hash": {
                    "description": "previously certified state hash",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "round_number": {
                    "description": "transaction system's round number",
                    "type": "integer"
                },
                "sum_of_earned_fees": {
                    "description": "sum of the actual fees over all transaction records in the block",
                    "type": "integer"
                },
                "summary_value": {
                    "description": "summary value to certified",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.Payload": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientMetadata": {
                    "$ref": "#/definitions/types.ClientMetadata"
                },
                "systemID": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "unitID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.ServerMetadata": {
            "type": "object",
            "properties": {
                "actualFee": {
                    "type": "integer"
                },
                "processingDetails": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "successIndicator": {
                    "$ref": "#/definitions/types.TxStatus"
                },
                "targetUnits": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "types.SignatureMap": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "integer"
                }
            }
        },
        "types.TransactionOrder": {
            "type": "object",
            "properties": {
                "feeProof": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ownerProof": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "payload": {
                    "$ref": "#/definitions/types.Payload"
                }
            }
        },
        "types.TransactionRecord": {
            "type": "object",
            "properties": {
                "serverMetadata": {
                    "$ref": "#/definitions/types.ServerMetadata"
                },
                "transactionOrder": {
                    "$ref": "#/definitions/types.TransactionOrder"
                }
            }
        },
        "types.TxStatus": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "TxStatusFailed",
                "TxStatusSuccessful"
            ]
        },
        "types.UnicityCertificate": {
            "type": "object",
            "properties": {
                "input_record": {
                    "$ref": "#/definitions/types.InputRecord"
                },
                "unicity_seal": {
                    "$ref": "#/definitions/types.UnicitySeal"
                },
                "unicity_tree_certificate": {
                    "$ref": "#/definitions/types.UnicityTreeCertificate"
                }
            }
        },
        "types.UnicitySeal": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "previous_hash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "root_chain_round_number": {
                    "type": "integer"
                },
                "signatures": {
                    "$ref": "#/definitions/types.SignatureMap"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.UnicityTreeCertificate": {
            "type": "object",
            "properties": {
                "sibling_hashes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/imt.PathItem"
                    }
                },
                "system_description_hash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "system_identifier": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Alphabill Blockchain Explorer API",
	Description:      "API to query blocks and transactions of Alphabill's Money Partition",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
