// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/address/{pubKey}/bills": {
            "get": {
                "description": "Get bills associated with a specific public key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bills"
                ],
                "summary": "Retrieve bills by public key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public Key",
                        "name": "pubKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bills",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Missing 'pubKey' variable in the URL",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error: Bills with specified public key not found",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blocks": {
            "get": {
                "description": "Get blocks, given a start block number and limit.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get blocks, given a start block number and limit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "optionally specify the start block number",
                        "name": "startBlock",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "optionally specify the number of blocks to return, defaults to 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.BlockInfo"
                            }
                        }
                    }
                }
            }
        },
        "/blocks/{blockNumber}": {
            "get": {
                "description": "Retrieves a block by using the provided block number as a path parameter, or retrieves the latest block if no number is specified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Retrieve a blockchain block by number, or the latest if unspecified",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number ('latest' or a specific number)",
                        "name": "blockNumber",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block information successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/api.BlockInfo"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid block number",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No block found with the specified number",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error, such as a failure to retrieve the block",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocks/{blockNumber}/txs": {
            "get": {
                "description": "Retrieves a list of transactions for a given block number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve transactions by block number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The block number for which to retrieve transactions",
                        "name": "blockNumber",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of transactions for the block",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TxInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid 'blockNumber' variable in the URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No transactions found for the specified block number",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/txs": {
            "get": {
                "description": "Retrieves a list of transactions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve transactions, latest first.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The sequence number of the transaction to start from, if not provided, the latest transactions are returned",
                        "name": "startSeqNumber",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of transactions to retrieve, default 20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TxInfo"
                            }
                        }
                    }
                }
            }
        },
        "/txs/{txHash}": {
            "get": {
                "description": "Retrieves transaction details using a transaction hash provided as a path parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve a transaction by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The hash of the transaction to retrieve (HEX encoded)",
                        "name": "txHash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the transaction information",
                        "schema": {
                            "$ref": "#/definitions/api.TxInfo"
                        }
                    },
                    "400": {
                        "description": "Missing 'txHash' variable in the URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction with the specified hash not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to load transaction details",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/units/{unitID}/txs": {
            "get": {
                "description": "Get transactions associated with a specific unit ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retrieve transactions by unit ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unit ID (0xHEX encoded)",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TxInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Missing 'unitID' variable in the URL",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error: Transaction with specified unit ID not found",
                        "schema": {
                            "$ref": "#/definitions/restapi.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.BlockInfo": {
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/types.Header"
                },
                "txHashes": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "unicityCertificate": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "api.TxInfo": {
            "type": "object",
            "properties": {
                "blockNumber": {
                    "type": "integer"
                },
                "transaction": {
                    "$ref": "#/definitions/types.TransactionRecord"
                },
                "txOrderHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "txRecordHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "restapi.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "types.Header": {
            "type": "object",
            "properties": {
                "partitionID": {
                    "type": "integer"
                },
                "previousBlockHash": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "proposerID": {
                    "type": "string"
                },
                "shardID": {
                    "$ref": "#/definitions/types.ShardID"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "types.ServerMetadata": {
            "type": "object",
            "properties": {
                "actualFee": {
                    "type": "integer"
                },
                "processingDetails": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "successIndicator": {
                    "$ref": "#/definitions/types.TxStatus"
                },
                "targetUnits": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "types.ShardID": {
            "type": "object"
        },
        "types.TransactionRecord": {
            "type": "object",
            "properties": {
                "serverMetadata": {
                    "$ref": "#/definitions/types.ServerMetadata"
                },
                "transactionOrder": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "types.TxStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "TxStatusFailed",
                "TxStatusSuccessful",
                "TxErrOutOfGas"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Alphabill Blockchain Explorer API",
	Description:      "API to query blocks and transactions of Alphabill's Money Partition",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
