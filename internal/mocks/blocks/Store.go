// Code generated by mockery v2.52.3. DO NOT EDIT.

package blocks_mocks

import (
	context "context"

	domain "github.com/alphabill-org/alphabill-explorer-backend/domain"
	mock "github.com/stretchr/testify/mock"

	types "github.com/alphabill-org/alphabill-go-base/types"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// GetBlockNumber provides a mock function with given fields: ctx, partitionID
func (_m *Store) GetBlockNumber(ctx context.Context, partitionID types.PartitionID) (uint64, error) {
	ret := _m.Called(ctx, partitionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID) (uint64, error)); ok {
		return rf(ctx, partitionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID) uint64); ok {
		r0 = rf(ctx, partitionID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PartitionID) error); ok {
		r1 = rf(ctx, partitionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockNumber'
type Store_GetBlockNumber_Call struct {
	*mock.Call
}

// GetBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionID types.PartitionID
func (_e *Store_Expecter) GetBlockNumber(ctx interface{}, partitionID interface{}) *Store_GetBlockNumber_Call {
	return &Store_GetBlockNumber_Call{Call: _e.mock.On("GetBlockNumber", ctx, partitionID)}
}

func (_c *Store_GetBlockNumber_Call) Run(run func(ctx context.Context, partitionID types.PartitionID)) *Store_GetBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PartitionID))
	})
	return _c
}

func (_c *Store_GetBlockNumber_Call) Return(_a0 uint64, _a1 error) *Store_GetBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetBlockNumber_Call) RunAndReturn(run func(context.Context, types.PartitionID) (uint64, error)) *Store_GetBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlockInfo provides a mock function with given fields: ctx, blockInfo
func (_m *Store) SetBlockInfo(ctx context.Context, blockInfo *domain.BlockInfo) error {
	ret := _m.Called(ctx, blockInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetBlockInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlockInfo) error); ok {
		r0 = rf(ctx, blockInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_SetBlockInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlockInfo'
type Store_SetBlockInfo_Call struct {
	*mock.Call
}

// SetBlockInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - blockInfo *domain.BlockInfo
func (_e *Store_Expecter) SetBlockInfo(ctx interface{}, blockInfo interface{}) *Store_SetBlockInfo_Call {
	return &Store_SetBlockInfo_Call{Call: _e.mock.On("SetBlockInfo", ctx, blockInfo)}
}

func (_c *Store_SetBlockInfo_Call) Run(run func(ctx context.Context, blockInfo *domain.BlockInfo)) *Store_SetBlockInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BlockInfo))
	})
	return _c
}

func (_c *Store_SetBlockInfo_Call) Return(_a0 error) *Store_SetBlockInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_SetBlockInfo_Call) RunAndReturn(run func(context.Context, *domain.BlockInfo) error) *Store_SetBlockInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlockNumber provides a mock function with given fields: ctx, partitionID, blockNumber
func (_m *Store) SetBlockNumber(ctx context.Context, partitionID types.PartitionID, blockNumber uint64) error {
	ret := _m.Called(ctx, partitionID, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for SetBlockNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID, uint64) error); ok {
		r0 = rf(ctx, partitionID, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_SetBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlockNumber'
type Store_SetBlockNumber_Call struct {
	*mock.Call
}

// SetBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionID types.PartitionID
//   - blockNumber uint64
func (_e *Store_Expecter) SetBlockNumber(ctx interface{}, partitionID interface{}, blockNumber interface{}) *Store_SetBlockNumber_Call {
	return &Store_SetBlockNumber_Call{Call: _e.mock.On("SetBlockNumber", ctx, partitionID, blockNumber)}
}

func (_c *Store_SetBlockNumber_Call) Run(run func(ctx context.Context, partitionID types.PartitionID, blockNumber uint64)) *Store_SetBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PartitionID), args[2].(uint64))
	})
	return _c
}

func (_c *Store_SetBlockNumber_Call) Return(_a0 error) *Store_SetBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_SetBlockNumber_Call) RunAndReturn(run func(context.Context, types.PartitionID, uint64) error) *Store_SetBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SetTxInfo provides a mock function with given fields: ctx, txInfo
func (_m *Store) SetTxInfo(ctx context.Context, txInfo *domain.TxInfo) error {
	ret := _m.Called(ctx, txInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetTxInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TxInfo) error); ok {
		r0 = rf(ctx, txInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_SetTxInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTxInfo'
type Store_SetTxInfo_Call struct {
	*mock.Call
}

// SetTxInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - txInfo *domain.TxInfo
func (_e *Store_Expecter) SetTxInfo(ctx interface{}, txInfo interface{}) *Store_SetTxInfo_Call {
	return &Store_SetTxInfo_Call{Call: _e.mock.On("SetTxInfo", ctx, txInfo)}
}

func (_c *Store_SetTxInfo_Call) Run(run func(ctx context.Context, txInfo *domain.TxInfo)) *Store_SetTxInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.TxInfo))
	})
	return _c
}

func (_c *Store_SetTxInfo_Call) Return(_a0 error) *Store_SetTxInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_SetTxInfo_Call) RunAndReturn(run func(context.Context, *domain.TxInfo) error) *Store_SetTxInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
