// Code generated by mockery v2.52.3. DO NOT EDIT.

package api_mocks

import (
	context "context"

	domain "github.com/alphabill-org/alphabill-explorer-backend/domain"
	mock "github.com/stretchr/testify/mock"

	types "github.com/alphabill-org/alphabill-go-base/types"
)

// StorageService is an autogenerated mock type for the StorageService type
type StorageService struct {
	mock.Mock
}

type StorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageService) EXPECT() *StorageService_Expecter {
	return &StorageService_Expecter{mock: &_m.Mock}
}

// FindTxs provides a mock function with given fields: ctx, searchKey, partitionIDs
func (_m *StorageService) FindTxs(ctx context.Context, searchKey []byte, partitionIDs []types.PartitionID) ([]*domain.TxInfo, error) {
	ret := _m.Called(ctx, searchKey, partitionIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindTxs")
	}

	var r0 []*domain.TxInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []types.PartitionID) ([]*domain.TxInfo, error)); ok {
		return rf(ctx, searchKey, partitionIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []types.PartitionID) []*domain.TxInfo); ok {
		r0 = rf(ctx, searchKey, partitionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TxInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []types.PartitionID) error); ok {
		r1 = rf(ctx, searchKey, partitionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_FindTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTxs'
type StorageService_FindTxs_Call struct {
	*mock.Call
}

// FindTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - searchKey []byte
//   - partitionIDs []types.PartitionID
func (_e *StorageService_Expecter) FindTxs(ctx interface{}, searchKey interface{}, partitionIDs interface{}) *StorageService_FindTxs_Call {
	return &StorageService_FindTxs_Call{Call: _e.mock.On("FindTxs", ctx, searchKey, partitionIDs)}
}

func (_c *StorageService_FindTxs_Call) Run(run func(ctx context.Context, searchKey []byte, partitionIDs []types.PartitionID)) *StorageService_FindTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]types.PartitionID))
	})
	return _c
}

func (_c *StorageService_FindTxs_Call) Return(_a0 []*domain.TxInfo, _a1 error) *StorageService_FindTxs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageService_FindTxs_Call) RunAndReturn(run func(context.Context, []byte, []types.PartitionID) ([]*domain.TxInfo, error)) *StorageService_FindTxs_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: ctx, blockNumber, partitionIDs
func (_m *StorageService) GetBlock(ctx context.Context, blockNumber uint64, partitionIDs []types.PartitionID) (map[types.PartitionID]*domain.BlockInfo, error) {
	ret := _m.Called(ctx, blockNumber, partitionIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 map[types.PartitionID]*domain.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []types.PartitionID) (map[types.PartitionID]*domain.BlockInfo, error)); ok {
		return rf(ctx, blockNumber, partitionIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []types.PartitionID) map[types.PartitionID]*domain.BlockInfo); ok {
		r0 = rf(ctx, blockNumber, partitionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.PartitionID]*domain.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []types.PartitionID) error); ok {
		r1 = rf(ctx, blockNumber, partitionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type StorageService_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
//   - partitionIDs []types.PartitionID
func (_e *StorageService_Expecter) GetBlock(ctx interface{}, blockNumber interface{}, partitionIDs interface{}) *StorageService_GetBlock_Call {
	return &StorageService_GetBlock_Call{Call: _e.mock.On("GetBlock", ctx, blockNumber, partitionIDs)}
}

func (_c *StorageService_GetBlock_Call) Run(run func(ctx context.Context, blockNumber uint64, partitionIDs []types.PartitionID)) *StorageService_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]types.PartitionID))
	})
	return _c
}

func (_c *StorageService_GetBlock_Call) Return(_a0 map[types.PartitionID]*domain.BlockInfo, _a1 error) *StorageService_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageService_GetBlock_Call) RunAndReturn(run func(context.Context, uint64, []types.PartitionID) (map[types.PartitionID]*domain.BlockInfo, error)) *StorageService_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksInRange provides a mock function with given fields: ctx, partitionID, dbStartBlock, count, includeEmpty
func (_m *StorageService) GetBlocksInRange(ctx context.Context, partitionID types.PartitionID, dbStartBlock uint64, count int, includeEmpty bool) ([]*domain.BlockInfo, uint64, error) {
	ret := _m.Called(ctx, partitionID, dbStartBlock, count, includeEmpty)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksInRange")
	}

	var r0 []*domain.BlockInfo
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID, uint64, int, bool) ([]*domain.BlockInfo, uint64, error)); ok {
		return rf(ctx, partitionID, dbStartBlock, count, includeEmpty)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID, uint64, int, bool) []*domain.BlockInfo); ok {
		r0 = rf(ctx, partitionID, dbStartBlock, count, includeEmpty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PartitionID, uint64, int, bool) uint64); ok {
		r1 = rf(ctx, partitionID, dbStartBlock, count, includeEmpty)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.PartitionID, uint64, int, bool) error); ok {
		r2 = rf(ctx, partitionID, dbStartBlock, count, includeEmpty)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StorageService_GetBlocksInRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksInRange'
type StorageService_GetBlocksInRange_Call struct {
	*mock.Call
}

// GetBlocksInRange is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionID types.PartitionID
//   - dbStartBlock uint64
//   - count int
//   - includeEmpty bool
func (_e *StorageService_Expecter) GetBlocksInRange(ctx interface{}, partitionID interface{}, dbStartBlock interface{}, count interface{}, includeEmpty interface{}) *StorageService_GetBlocksInRange_Call {
	return &StorageService_GetBlocksInRange_Call{Call: _e.mock.On("GetBlocksInRange", ctx, partitionID, dbStartBlock, count, includeEmpty)}
}

func (_c *StorageService_GetBlocksInRange_Call) Run(run func(ctx context.Context, partitionID types.PartitionID, dbStartBlock uint64, count int, includeEmpty bool)) *StorageService_GetBlocksInRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PartitionID), args[2].(uint64), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *StorageService_GetBlocksInRange_Call) Return(res []*domain.BlockInfo, prevBlockNumber uint64, err error) *StorageService_GetBlocksInRange_Call {
	_c.Call.Return(res, prevBlockNumber, err)
	return _c
}

func (_c *StorageService_GetBlocksInRange_Call) RunAndReturn(run func(context.Context, types.PartitionID, uint64, int, bool) ([]*domain.BlockInfo, uint64, error)) *StorageService_GetBlocksInRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastBlocks provides a mock function with given fields: ctx, partitionIDs, count, includeEmpty
func (_m *StorageService) GetLastBlocks(ctx context.Context, partitionIDs []types.PartitionID, count int, includeEmpty bool) (map[types.PartitionID][]*domain.BlockInfo, error) {
	ret := _m.Called(ctx, partitionIDs, count, includeEmpty)

	if len(ret) == 0 {
		panic("no return value specified for GetLastBlocks")
	}

	var r0 map[types.PartitionID][]*domain.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.PartitionID, int, bool) (map[types.PartitionID][]*domain.BlockInfo, error)); ok {
		return rf(ctx, partitionIDs, count, includeEmpty)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.PartitionID, int, bool) map[types.PartitionID][]*domain.BlockInfo); ok {
		r0 = rf(ctx, partitionIDs, count, includeEmpty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.PartitionID][]*domain.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.PartitionID, int, bool) error); ok {
		r1 = rf(ctx, partitionIDs, count, includeEmpty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_GetLastBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBlocks'
type StorageService_GetLastBlocks_Call struct {
	*mock.Call
}

// GetLastBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionIDs []types.PartitionID
//   - count int
//   - includeEmpty bool
func (_e *StorageService_Expecter) GetLastBlocks(ctx interface{}, partitionIDs interface{}, count interface{}, includeEmpty interface{}) *StorageService_GetLastBlocks_Call {
	return &StorageService_GetLastBlocks_Call{Call: _e.mock.On("GetLastBlocks", ctx, partitionIDs, count, includeEmpty)}
}

func (_c *StorageService_GetLastBlocks_Call) Run(run func(ctx context.Context, partitionIDs []types.PartitionID, count int, includeEmpty bool)) *StorageService_GetLastBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.PartitionID), args[2].(int), args[3].(bool))
	})
	return _c
}

func (_c *StorageService_GetLastBlocks_Call) Return(_a0 map[types.PartitionID][]*domain.BlockInfo, _a1 error) *StorageService_GetLastBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageService_GetLastBlocks_Call) RunAndReturn(run func(context.Context, []types.PartitionID, int, bool) (map[types.PartitionID][]*domain.BlockInfo, error)) *StorageService_GetLastBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxByHash provides a mock function with given fields: ctx, txHash
func (_m *StorageService) GetTxByHash(ctx context.Context, txHash domain.TxHash) (*domain.TxInfo, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTxByHash")
	}

	var r0 *domain.TxInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TxHash) (*domain.TxInfo, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TxHash) *domain.TxInfo); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TxInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TxHash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_GetTxByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxByHash'
type StorageService_GetTxByHash_Call struct {
	*mock.Call
}

// GetTxByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash domain.TxHash
func (_e *StorageService_Expecter) GetTxByHash(ctx interface{}, txHash interface{}) *StorageService_GetTxByHash_Call {
	return &StorageService_GetTxByHash_Call{Call: _e.mock.On("GetTxByHash", ctx, txHash)}
}

func (_c *StorageService_GetTxByHash_Call) Run(run func(ctx context.Context, txHash domain.TxHash)) *StorageService_GetTxByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TxHash))
	})
	return _c
}

func (_c *StorageService_GetTxByHash_Call) Return(res *domain.TxInfo, err error) *StorageService_GetTxByHash_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *StorageService_GetTxByHash_Call) RunAndReturn(run func(context.Context, domain.TxHash) (*domain.TxInfo, error)) *StorageService_GetTxByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxsByBlockNumber provides a mock function with given fields: ctx, blockNumber, partitionID
func (_m *StorageService) GetTxsByBlockNumber(ctx context.Context, blockNumber uint64, partitionID types.PartitionID) ([]*domain.TxInfo, error) {
	ret := _m.Called(ctx, blockNumber, partitionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTxsByBlockNumber")
	}

	var r0 []*domain.TxInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, types.PartitionID) ([]*domain.TxInfo, error)); ok {
		return rf(ctx, blockNumber, partitionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, types.PartitionID) []*domain.TxInfo); ok {
		r0 = rf(ctx, blockNumber, partitionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TxInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, types.PartitionID) error); ok {
		r1 = rf(ctx, blockNumber, partitionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_GetTxsByBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxsByBlockNumber'
type StorageService_GetTxsByBlockNumber_Call struct {
	*mock.Call
}

// GetTxsByBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
//   - partitionID types.PartitionID
func (_e *StorageService_Expecter) GetTxsByBlockNumber(ctx interface{}, blockNumber interface{}, partitionID interface{}) *StorageService_GetTxsByBlockNumber_Call {
	return &StorageService_GetTxsByBlockNumber_Call{Call: _e.mock.On("GetTxsByBlockNumber", ctx, blockNumber, partitionID)}
}

func (_c *StorageService_GetTxsByBlockNumber_Call) Run(run func(ctx context.Context, blockNumber uint64, partitionID types.PartitionID)) *StorageService_GetTxsByBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(types.PartitionID))
	})
	return _c
}

func (_c *StorageService_GetTxsByBlockNumber_Call) Return(_a0 []*domain.TxInfo, _a1 error) *StorageService_GetTxsByBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageService_GetTxsByBlockNumber_Call) RunAndReturn(run func(context.Context, uint64, types.PartitionID) ([]*domain.TxInfo, error)) *StorageService_GetTxsByBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxsByUnitID provides a mock function with given fields: ctx, unitID
func (_m *StorageService) GetTxsByUnitID(ctx context.Context, unitID types.UnitID) ([]*domain.TxInfo, error) {
	ret := _m.Called(ctx, unitID)

	if len(ret) == 0 {
		panic("no return value specified for GetTxsByUnitID")
	}

	var r0 []*domain.TxInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UnitID) ([]*domain.TxInfo, error)); ok {
		return rf(ctx, unitID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UnitID) []*domain.TxInfo); ok {
		r0 = rf(ctx, unitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TxInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UnitID) error); ok {
		r1 = rf(ctx, unitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageService_GetTxsByUnitID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxsByUnitID'
type StorageService_GetTxsByUnitID_Call struct {
	*mock.Call
}

// GetTxsByUnitID is a helper method to define mock.On call
//   - ctx context.Context
//   - unitID types.UnitID
func (_e *StorageService_Expecter) GetTxsByUnitID(ctx interface{}, unitID interface{}) *StorageService_GetTxsByUnitID_Call {
	return &StorageService_GetTxsByUnitID_Call{Call: _e.mock.On("GetTxsByUnitID", ctx, unitID)}
}

func (_c *StorageService_GetTxsByUnitID_Call) Run(run func(ctx context.Context, unitID types.UnitID)) *StorageService_GetTxsByUnitID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UnitID))
	})
	return _c
}

func (_c *StorageService_GetTxsByUnitID_Call) Return(_a0 []*domain.TxInfo, _a1 error) *StorageService_GetTxsByUnitID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageService_GetTxsByUnitID_Call) RunAndReturn(run func(context.Context, types.UnitID) ([]*domain.TxInfo, error)) *StorageService_GetTxsByUnitID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxsPage provides a mock function with given fields: ctx, partitionID, startID, limit
func (_m *StorageService) GetTxsPage(ctx context.Context, partitionID types.PartitionID, startID string, limit int) ([]*domain.TxInfo, string, error) {
	ret := _m.Called(ctx, partitionID, startID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTxsPage")
	}

	var r0 []*domain.TxInfo
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID, string, int) ([]*domain.TxInfo, string, error)); ok {
		return rf(ctx, partitionID, startID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PartitionID, string, int) []*domain.TxInfo); ok {
		r0 = rf(ctx, partitionID, startID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TxInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PartitionID, string, int) string); ok {
		r1 = rf(ctx, partitionID, startID, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.PartitionID, string, int) error); ok {
		r2 = rf(ctx, partitionID, startID, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StorageService_GetTxsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxsPage'
type StorageService_GetTxsPage_Call struct {
	*mock.Call
}

// GetTxsPage is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionID types.PartitionID
//   - startID string
//   - limit int
func (_e *StorageService_Expecter) GetTxsPage(ctx interface{}, partitionID interface{}, startID interface{}, limit interface{}) *StorageService_GetTxsPage_Call {
	return &StorageService_GetTxsPage_Call{Call: _e.mock.On("GetTxsPage", ctx, partitionID, startID, limit)}
}

func (_c *StorageService_GetTxsPage_Call) Run(run func(ctx context.Context, partitionID types.PartitionID, startID string, limit int)) *StorageService_GetTxsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PartitionID), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *StorageService_GetTxsPage_Call) Return(transactions []*domain.TxInfo, previousID string, err error) *StorageService_GetTxsPage_Call {
	_c.Call.Return(transactions, previousID, err)
	return _c
}

func (_c *StorageService_GetTxsPage_Call) RunAndReturn(run func(context.Context, types.PartitionID, string, int) ([]*domain.TxInfo, string, error)) *StorageService_GetTxsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
